obj/items

	Communicator
		icon='Cell Phone.dmi'
		desc="Use this to call somebody who also has a cell phone. Just use Say or Whisper and you can \
		talk to them til the call has ended. You end a call by hitting Use again. Anyone within 1 space \
		of you can hear your conversation and also be heard on the cell phone"
		var/Frequency=1
		Stealable=1

		verb/Transmit(msg as text)

			for(var/mob/player/A in Players)

				for(var/obj/items/Scanner/B in A)
					if(B.suffix&&A.Dead==usr.Dead&&B.Frequency==Frequency)
						A<<"<font color=#FFFFFF>(Scanner Channel [Frequency])<font color=[usr.TextColor]>[usr] says, '[msg]'"
						A.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
						([usr.x], [usr.y], [usr.z]) | [key_name(usr)] SCANNER: [msg]<br>")

				for(var/obj/items/Communicator/B in A)
					if(A.Dead==usr.Dead&&B.Frequency==Frequency)
						A<<"<font color=#FFFFFF>(Scanner Channel [Frequency])<font color=[usr.TextColor]>[usr] says, '[msg]'"
						A.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
						([usr.x], [usr.y], [usr.z]) | [key_name(usr)] SCANNER: [msg]<br>")

		verb/Frequency()
			Frequency=input("Choose a frequency, it can be anything. It lets you talk to \
							others on the same frequency. Default is 1") as text


	Scanner
		icon='Item - Sun Glassess.dmi'
		var/Scan=1
		var/Range=5
		var/Detects
		var/CanDetect
		var/Frequency=1
		Stealable=1
		desc="Equipping this will open a tab that allows you to see the battle power of all people \
		within the scanner's range and detection capabilities."

		Click()
			if(locate(src) in usr)
				if(!suffix)
					usr<<"You put on the [src]."
					usr.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
					([usr.x], [usr.y], [usr.z]) | [key_name(usr)] equips [src].<br>")
					usr.overlays+=icon
					suffix="*Equipped*"
				else
					usr<<"You take off the [src]."
					usr.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
					([usr.x], [usr.y], [usr.z]) | [key_name(usr)] removes [src].<br>")
					usr.overlays-=icon
					suffix=null

		verb
			Transmit(msg as text)

				for(var/mob/player/A in Players)

					for(var/obj/items/Scanner/B in A)

						if(B.suffix&&A.Dead==usr.Dead&&B.Frequency==Frequency)
							A<<"<font color=#FFFFFF>(Scanner Channel [Frequency])<font color=[usr.TextColor]>[usr] says, '[msg]'"
							A.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
							([usr.x], [usr.y], [usr.z]) | [key_name(usr)] SCANNER: [msg]<br>")

					for(var/obj/items/Communicator/B in A)

						if(A.Dead==usr.Dead&&B.Frequency==Frequency)
							A<<"<font color=#FFFFFF>(Scanner Channel [Frequency])<font color=[usr.TextColor]>[usr] says, \'[msg]'"
							A.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | \
							([usr.x], [usr.y], [usr.z]) | [key_name(usr)] SCANNER: [msg]<br>")

			Frequency()
				Frequency=input("Choose a frequency, it can be anything. It lets you talk to \
								others on the same frequency. Default is 1") as text

			Detect()
				if(!CanDetect)
					usr<<"This feature is not installed. It can only be installed by a very intelligent person."
					return
				if(Detects) switch(input("Are you sure you want to reset detecting?") in list("No","Yes"))
					if("Yes") Detects=null
					if("No") return
				var/list/A=new
				for(var/obj/B in oview(1,usr)) A+=B
				if(!A)
					usr<<"You are not near an object to set the scanner to."
					return
				A+="Cancel"
				var/obj/B=input("Set to detect what type of object?") in A
				if(B=="Cancel") return
				Detects=B.type
				usr<<"Set to detect [B]"
				usr.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | ([usr.x], [usr.y], [usr.z]) | [key_name(usr)] sets their scanner to detect [B].<br>")

			Upgrade()
				set src in oview(1)
				if(usr.Int_Level<Tech)
					usr<<"This is too advanced for you to mess with."
					return
				var/obj/Resources/A
				for(var/obj/Resources/B in usr) A=B
				var/Cost=20000/usr.Add
				var/Max_Upgrade=(A.Value/Cost)+Tech
				if(Max_Upgrade>usr.Int_Level) Max_Upgrade=usr.Int_Level
				var/Upgrade=input("Upgrade it to what level? (1-[round(Max_Upgrade)]). The maximum amount you can upgrade is determined by your intelligence (Max Upgrade cannot exceed Intelligence), and how much resources you have. So if the maximum is less than your intelligence then it is instead due to not having enough resources to upgrade it higher than the said maximum.") as num
				if(Upgrade>usr.Int_Level) Upgrade=usr.Int_Level
				if(Upgrade>Max_Upgrade) Upgrade=Max_Upgrade
				if(Upgrade<1) Upgrade=1
				Upgrade=round(Upgrade)
				if(Upgrade<Tech) switch(input("You wish to bring this Level [Tech] [src] to Level [Upgrade]?") in list("Yes","No"))
					if("No") return
				Cost*=Upgrade-Tech
				if(Cost<0) Cost=0
				if(Cost>A.Value)
					usr<<"You do not have enough resources to upgrade it to level [Upgrade]"
					return
				view(src)<<"[usr] upgrades the [src] to level [Upgrade]"
				for(var/mob/player/M in view(src)) if(M.client) M.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | ([usr.x], [usr.y], [usr.z]) | [key_name(usr)] upgrades the [src] to level [Upgrade].<br>")
				for(var/mob/player/M in view(usr))
					if(!M.client) return
					M.saveToLog("| [usr.client.address ? (usr.client.address) : "IP not found"] | ([usr.x], [usr.y], [usr.z]) | [key_name(usr)] <br>")
				A.Value-=Cost
				Tech=Upgrade
				Scan=0.5*Upgrade*0.001*rand(990,1010)
				Range=5*Upgrade*0.01*rand(80,120)
				if(Upgrade>=60) CanDetect=1
				desc="Level [Tech] [src] ([Commas((Scan**3)*20)] BP)"

			/*Upgrade()
				set src in oview(1)
				var/obj/Resources/A
				for(var/obj/Resources/B in usr) A=B
				var/list/Choices=new
				if(A.Value>=1000*Tech/usr.Add) Choices.Add("Scan Limit ([1000*Tech/usr.Add])")
				if(A.Value>=1000*Tech/usr.Add&&Range<1000) Choices.Add("Scan Range ([1000*Tech/usr.Add])")
				if(A.Value>=100000/usr.Add&&!CanDetect&&usr.Int_Level>=25) Choices.Add("Item Detection ([100000/usr.Add])")
				if(!Choices)
					usr<<"You do not have enough resources"
					return
				var/Choice=input("Change what?") in Choices
				if(Choice=="Scan Limit ([1000*Tech/usr.Add])")
					if(A.Value<1000*Tech/usr.Add) return
					A.Value-=1000*Tech/usr.Add
					Scan++
				if(Choice=="Scan Range ([1000*Tech/usr.Add])")
					if(A.Value<1000*Tech/usr.Add) return
					A.Value-=1000*Tech/usr.Add
					Range*=2
				if(Choice=="Item Detection ([100000/usr.Add])")
					if(A.Value<100000/usr.Add) return
					A.Value-=100000/usr.Add
					CanDetect=1
				Tech++
				desc=null
				desc+="<br>Scan Limit: [Scan] ([Commas((Scan**3)*1000)] bp)"
				desc+="<br>Scan Range: [Range]"
				if(CanDetect) desc+="<br>Object Detection Installed"*/
